using OMetaSharp;
using YaYAML;

ometa YaYAML.Parsing.YamlParser : Parser {
  Document = Mapping:m ->  { new YamlDocument(m.As<YamlMapping>()) }
           | Sequence:s -> { new YamlDocument(s.As<YamlSequence>()) },

  Mapping = MappingPair+:pairs -> { new YamlMapping(pairs.ToIEnumerable<YamlMappingPair>()) },
  MappingKey = Spaces (~':' ~NewLine ~SequenceItemID Character)+:key ':' -> { key },
  MappingValue = NewLine Sequence:s -> { s.As<YamlSequence>() }
               | NewLine MultilineText:t -> { new YamlText(t.As<string>()) }
               | Spaces Text:t OptNewLine -> { new YamlText(t.As<string>()) },
  MappingPair = MappingKey:key MappingValue:value -> { new YamlMappingPair(key.As<string>(), value.As<IYamlEntity>()) },

  Sequence = SequenceItem+:items -> { new YamlSequence(items.ToIEnumerable<IYamlEntity>()) },
  SequenceItemID = Spaces '-' Space,
  SequenceItem = SequenceItemID Mapping:map OptNewLine -> { map.As<YamlMapping>() }
               | SequenceItemID Text:text OptNewLine -> { new YamlText(text.As<string>()) },
  
  MultilineText = MultilineTextLine+:lines -> { lines.Join(" ") },
  MultilineTextLine = Space+:s Text:text<string> OptNewLine -> { text },
  
  Text = (~NewLine Character)+:t -> { t.As<string>() },
  NewLine = '\r' '\n'
          | '\n',
  OptNewLine = (NewLine | Empty)
}