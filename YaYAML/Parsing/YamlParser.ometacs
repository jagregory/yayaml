using OMetaSharp;
using YaYAML;

ometa YaYAML.Parsing.YamlParser : Parser {
  Document = Mapping(0):m ->  { new YamlDocument(m.As<YamlMapping>()) }
           | Sequence(0):s -> { new YamlDocument(s.As<YamlSequence>()) },

  MappingInline :initialIndent = MappingPairFirst(0, initialIndent):first MappingPair(initialIndent)*:pairs -> { new YamlMapping(first.As<YamlMappingPair>(), pairs.ToIEnumerable<YamlMappingPair>()) },
  Mapping :initialIndent = MappingPair(initialIndent)+:pairs -> { new YamlMapping(pairs.ToIEnumerable<YamlMappingPair>()) },
  MappingKey :initialIndent = Indent(initialIndent) (~':' ~NewLine ~SequenceItemID Character)+:key ':' -> { key },
  MappingValue :initialIndent<int> = NewLine Sequence(initialIndent):s -> { s.As<YamlSequence>() }
               | NewLine MultilineText(initialIndent):t -> { new YamlText(t.As<string>()) }
               | Spaces Text:t OptNewLine -> { new YamlText(t.As<string>()) },
  MappingPairFirst :keyIndent :valueIndent = &ChildIndent(valueIndent):childIndent MappingKey(keyIndent):key MappingValue(childIndent):value -> { new YamlMappingPair(key.As<string>(), value.As<IYamlEntity>()) },
  MappingPair :initialIndent = &ChildIndent(initialIndent):childIndent MappingKey(initialIndent):key MappingValue(childIndent):value -> { new YamlMappingPair(key.As<string>(), value.As<IYamlEntity>()) },

  Sequence :initialIndent = SequenceItem(initialIndent)+:items -> { new YamlSequence(items.ToIEnumerable<IYamlEntity>()) },
  SequenceItemID = '-' Space,
  SequenceItem :indent = Indent(indent) &ChildIndent(indent):ci SequenceItemID MappingInline(ci):map OptNewLine -> { map.As<YamlMapping>() }
                       | Indent(indent) SequenceItemID Text:text OptNewLine -> { new YamlText(text.As<string>()) },
  
  MultilineText :indent = MultilineTextLine(indent)+:lines -> { lines.Join(" ") },
  MultilineTextLine :indent = Indent(indent) Text:text<string> OptNewLine -> { text },
  
  Text = (~NewLine Character)+:t -> { t.As<string>() },
  NewLine = '\r' '\n'
          | '\n',
  OptNewLine = (NewLine | Empty),
  
  SpaceCount = Space+:s<string> -> { s.Length }
             | Empty -> { 0 },
  Indent :depth = SpaceCount:initialIndent ?( initialIndent.As<int>() >= int.Parse(depth.As<string>()) ),
  ChildIndent :indent -> { indent.As<int>() + 2 }
}